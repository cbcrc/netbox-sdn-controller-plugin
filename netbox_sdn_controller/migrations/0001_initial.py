# Generated by Django 5.0.9 on 2024-11-14 18:15

import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0012_job_object_type_optional'),
        ('dcim', '0191_module_bay_rebuild'),
        ('extras', '0121_customfield_related_object_filter'),
        ('ipam', '0070_vlangroup_vlan_id_ranges'),
    ]

    operations = [
        migrations.CreateModel(
            name='SdnController',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('hostname', models.CharField(max_length=2000, unique=True)),
                ('sdn_type', models.CharField(default='cisco dnac', max_length=30)),
                ('version', models.CharField(max_length=10)),
                ('role_regex_template', models.JSONField(blank=True, null=True)),
                ('last_sync_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sdncontroller', to='core.job')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'SDN Controller',
                'verbose_name_plural': 'SDN Controllers',
                'ordering': ['hostname'],
            },
        ),
        migrations.CreateModel(
            name='SdnControllerDevicePrototype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('serial', models.CharField(blank=True, max_length=50, null=True)),
                ('sdn_hostname', models.CharField(blank=True, max_length=50, null=True)),
                ('sdn_management_ip', models.CharField(blank=True, max_length=50, null=True)),
                ('sdn_device_type', models.CharField(blank=True, max_length=50, null=True)),
                ('sdn_role', models.CharField(blank=True, max_length=50, null=True)),
                ('raw_data', models.JSONField()),
                ('instance_uuid', models.CharField(max_length=50)),
                ('family', models.CharField(blank=True, max_length=50, null=True)),
                ('sync_status', models.CharField(default='discovered', max_length=10)),
                ('score', models.IntegerField(default=0)),
                ('device_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prototypeinstances', to='dcim.devicetype')),
                ('matching_netbox_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='matchingdevice', to='dcim.device')),
                ('primary_ip4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prototype+', to='ipam.ipaddress')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prototypedevices', to='dcim.devicerole')),
                ('sdn_controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deviceprototype', to='netbox_sdn_controller.sdncontroller')),
                ('site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='prototypedevices', to='dcim.site')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Device Prototype',
                'verbose_name_plural': 'Device Prototypes',
                'ordering': ['score', 'matching_netbox_device__name'],
                'unique_together': {('instance_uuid', 'serial')},
            },
        ),
    ]
